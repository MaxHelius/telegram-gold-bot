# --- –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ ---
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, ConversationHandler
import datetime
import random
import math
# --- –î–û–î–ê–ù–û –ù–û–í–Ü –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ò –î–õ–Ø –†–û–ë–û–¢–ò –ù–ê –°–ï–†–í–ï–†–Ü ---
import os
import json

# --- –û–°–ù–û–í–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
# –¢–µ–ø–µ—Ä –±–æ—Ç —á–∏—Ç–∞—î —Å–µ–∫—Ä–µ—Ç–Ω—ñ –¥–∞–Ω—ñ –∑ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è)
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
SHEET_NAME = "–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞"
# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –∞–¥–º—ñ–Ω–∞ –∑ —Ç–µ–∫—Å—Ç—É –≤ —á–∏—Å–ª–æ
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID"))

# --- –Ü–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω ---
REFERRAL_BONUS = 10 
WITHDRAWAL_MIN_AMOUNT = 25
ABANDON_TIMEOUT_MINUTES = 30 
RARE_SKINS = [
    "M4 | Flock", "UMP45 | Arid", "Tec-9 | Tie Dye", "MAC-10 | Corrode", "MAC-10 | Arid", "USP | Corrode", "USP | Ghosts"
]
MAIN_KEYBOARD = ReplyKeyboardMarkup([['üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'], ['ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'üìä –ú–æ–π –±–∞–ª–∞–Ω—Å'], ['üì§ –í—ã–≤–æ–¥ –≥–æ–ª–¥—ã']], resize_keyboard=True)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets ---
try:
    scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
    
    # --- –ó–ú–Ü–ù–ï–ù–û –°–ü–û–°–Ü–ë –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø ---
    # –ë–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ —á–∏—Ç–∞—î —Ñ–∞–π–ª credentials.json.
    # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –≤—ñ–Ω —á–∏—Ç–∞—î –π–æ–≥–æ –≤–º—ñ—Å—Ç –∑ –±–µ–∑–ø–µ—á–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.
    creds_json_str = os.environ.get("GOOGLE_CREDS_JSON")
    creds_json_dict = json.loads(creds_json_str)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json_dict, scope)
    
    client = gspread.authorize(creds)
    workbook = client.open(SHEET_NAME)
    task_sheet = workbook.sheet1
    users_sheet = workbook.worksheet("Users")
    payouts_sheet = workbook.worksheet("PendingPayouts")
    withdrawals_sheet = workbook.worksheet("Withdrawals")
    print("–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –ª–∏—Å—Ç–∞–º Google!")
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ: {e}")
    workbook = None

#
# --- –£–°–Ø –Ü–ù–®–ê –õ–û–ì–Ü–ö–ê –í–ê–®–û–ì–û –ë–û–¢–ê –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø –ë–ï–ó –ó–ú–Ü–ù ---
#

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def get_user_balance(user_id):
    try:
        cell = users_sheet.find(str(user_id), in_column=1)
        if cell: return int(users_sheet.cell(cell.row, 3).value)
    except: pass
    return 0

def get_or_create_user(user_id, username, referrer_id=None):
    try:
        cell = users_sheet.find(str(user_id), in_column=1)
        if cell: return users_sheet.row_values(cell.row)
    except gspread.exceptions.CellNotFound: pass
    new_user_row = [str(user_id), username, 0, str(referrer_id) if referrer_id else ""]
    users_sheet.append_row(new_user_row); return new_user_row

def update_user_balance(user_id, amount_to_add):
    try:
        cell = users_sheet.find(str(user_id), in_column=1)
        if cell:
            new_balance = int(users_sheet.cell(cell.row, 3).value) + amount_to_add
            users_sheet.update_cell(cell.row, 3, new_balance); return new_balance
    except: pass
    return None

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–≤–æ–¥–∞ –≥–æ–ª–¥—ã ---
ASKING_WITHDRAWAL_AMOUNT, AWAITING_AVATAR = range(2) 
async def start_withdrawal(update: Update, context: CallbackContext):
    balance = get_user_balance(update.effective_user.id)
    if balance < WITHDRAWAL_MIN_AMOUNT:
        await update.message.reply_text(f"‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ **{WITHDRAWAL_MIN_AMOUNT}** –≥–æ–ª–¥—ã.\n–í–∞—à –±–∞–ª–∞–Ω—Å: **{balance}**.", parse_mode='Markdown'); return ConversationHandler.END
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{balance}** –≥–æ–ª–¥—ã.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove()); return ASKING_WITHDRAWAL_AMOUNT
async def handle_withdrawal_amount(update: Update, context: CallbackContext):
    balance = get_user_balance(update.effective_user.id)
    try: amount = int(update.message.text)
    except ValueError: await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."); return ASKING_WITHDRAWAL_AMOUNT
    if amount < WITHDRAWAL_MIN_AMOUNT: await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ - {WITHDRAWAL_MIN_AMOUNT} –≥–æ–ª–¥—ã."); return ASKING_WITHDRAWAL_AMOUNT
    if amount > balance: await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance}."); return ASKING_WITHDRAWAL_AMOUNT
    context.user_data.update({'withdrawal_amount': amount, 'listing_price': math.ceil(amount / 0.8), 'skin_to_sell': random.choice(RARE_SKINS)})
    await update.message.reply_text(f"‚úÖ **–®–∞–≥ 1 –∏–∑ 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**\n\n1. –í—ã—Å—Ç–∞–≤—å—Ç–µ —Å–∫–∏–Ω: **{context.user_data['skin_to_sell']}**\n2. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É: **{context.user_data['listing_price']} –≥–æ–ª–¥—ã**\n\n**–®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∞–≤–∞—Ç–∞—Ä–∫—É)**.", parse_mode='Markdown'); return AWAITING_AVATAR
async def handle_avatar(update: Update, context: CallbackContext):
    user, data = update.effective_user, context.user_data
    if not all([data.get(k) for k in ['withdrawal_amount', 'listing_price', 'skin_to_sell']]):
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–≤–æ–¥ –∑–∞–Ω–æ–≤–æ.", reply_markup=MAIN_KEYBOARD); return ConversationHandler.END
    update_user_balance(user.id, -data['withdrawal_amount'])
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    withdrawals_sheet.append_row([str(user.id), user.username, data['withdrawal_amount'], data['skin_to_sell'], data['listing_price'], timestamp, "–û–∂–∏–¥–∞–µ—Ç"])
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–∫—É–ø–∞.", reply_markup=MAIN_KEYBOARD)
    admin_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"wd_complete_{timestamp}")]])
    await context.bot.send_photo(ADMIN_CHAT_ID, update.message.photo[-1].file_id, caption=f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n–û—Ç: @{user.username} (ID: {user.id})\n–°—É–º–º–∞: **{data['withdrawal_amount']}**\n–°–∫–∏–Ω: **{data['skin_to_sell']}**\n–¶–µ–Ω–∞: **{data['listing_price']}**\n\n–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–ª–∞–ª –∞–≤–∞—Ç–∞—Ä–∫—É.", parse_mode='Markdown', reply_markup=admin_keyboard)
    context.user_data.clear(); return ConversationHandler.END
async def cancel_action(update: Update, context: CallbackContext):
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KEYBOARD); return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: CallbackContext):
    user, referrer_id = update.effective_user, None
    if context.args and context.args[0].startswith('ref'):
        try:
            p_ref_id = int(context.args[0][3:])
            if p_ref_id != user.id: referrer_id = p_ref_id
        except (ValueError, IndexError): pass
    get_or_create_user(user.id, user.username or f"user_{user.id}", referrer_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–¥—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=MAIN_KEYBOARD)

async def show_balance(update: Update, context: CallbackContext):
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{get_user_balance(update.effective_user.id)}** –≥–æ–ª–¥—ã.", parse_mode='Markdown', reply_markup=MAIN_KEYBOARD)
async def show_referral_info(update: Update, context: CallbackContext):
    bot_username = (await context.bot.get_me()).username
    await update.message.reply_text(f"ü§ù **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –∏ –∫–æ–≥–¥–∞ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REFERRAL_BONUS} –≥–æ–ª–¥—ã**.\n\nüîó **–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:**\n`https://t.me/{bot_username}?start=ref{update.effective_user.id}`", parse_mode='Markdown', disable_web_page_preview=True)
async def choose_platform(update: Update, context: CallbackContext):
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:', reply_markup=ReplyKeyboardMarkup([['–û—Ç–∑—ã–≤—ã Google', '–û—Ç–∑—ã–≤—ã –Ø–Ω–¥–µ–∫—Å'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True))
async def show_platform_tasks(update: Update, context: CallbackContext):
    platform_name = "Google" if "Google" in update.message.text else "Yandex"
    await update.message.reply_text(f"–ò—â—É –∑–∞–¥–∞–Ω–∏—è...", reply_markup=ReplyKeyboardRemove())
    all_tasks = task_sheet.get_all_records()
    available_tasks = [t for t in all_tasks if t.get('Platform') == platform_name and t.get('Status') == '–î–æ—Å—Ç—É–ø–Ω–æ']
    if not available_tasks: await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.", reply_markup=MAIN_KEYBOARD); return
    message = f"üî• **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({platform_name}):**\n\n"
    for task in available_tasks: message += f"üîπ **ID: {task['ID']}** - {task['LocationName']} (üí∞ **{task.get('Reward', 'N/A')} –≥–æ–ª–¥—ã**)\n"
    await update.message.reply_text(f"{message}\n**–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID**, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ.", parse_mode='Markdown')

async def handle_id_message(update: Update, context: CallbackContext):
    task_id, user = int(update.message.text), update.effective_user
    all_tasks, task_to_take, row_number = task_sheet.get_all_records(), None, 0
    for i, t in enumerate(all_tasks):
        if t.get('ID') == task_id: row_number = i + 2; task_to_take = t; break
    if not task_to_take or task_to_take.get('Status') != '–î–æ—Å—Ç—É–ø–Ω–æ': await update.message.reply_text("üòî –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ.", reply_markup=MAIN_KEYBOARD); return
    
    context.user_data.update({'task_id': task_id, 'row_number': row_number})
    timestamp_now = datetime.datetime.utcnow().isoformat()
    task_sheet.update_cell(row_number, 7, f'–í —Ä–∞–±–æ—Ç–µ ({user.id})')
    task_sheet.update_cell(row_number, 9, timestamp_now)
    
    cancel_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏—è", callback_data=f"cancel_task_{task_id}")]])
    await update.message.reply_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ **ID: {task_to_take['ID']}**\n\nüìç **–õ–æ–∫–∞—Ü–∏—è:** {task_to_take['LocationName']}\n‚≠ê **–û—Ü–µ–Ω–∫–∞:** {task_to_take['Stars']}\n\nüìù **–¢–µ–∫—Å—Ç:**\n`{task_to_take['ReviewText']}`\n\nüëá **–°—Å—ã–ª–∫–∞:**\n{task_to_take['LocationURL']}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", parse_mode='Markdown', disable_web_page_preview=True, reply_markup=cancel_keyboard)

async def handle_screenshot(update: Update, context: CallbackContext):
    if 'task_id' not in context.user_data: await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.", reply_markup=MAIN_KEYBOARD); return
    user = update.effective_user
    task_id, row_number = context.user_data['task_id'], context.user_data['row_number']
    task_sheet.update_cell(row_number, 7, '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')
    task_sheet.update_cell(row_number, 9, '')
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=MAIN_KEYBOARD)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{task_id}_{user.id}"), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{task_id}_{user.id}") ]])
    await context.bot.send_photo(ADMIN_CHAT_ID, update.message.photo[-1].file_id, caption=f"üîî –ü—Ä–æ–≤–µ—Ä–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: {user.id})\n–ó–∞–¥–∞–Ω–∏–µ ID: {task_id}", reply_markup=keyboard)
    context.user_data.clear()

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def handle_button_callback(update: Update, context: CallbackContext):
    query, data = update.callback_query, update.callback_query.data
    await query.answer()

    if data.startswith("cancel_task_"):
        task_id_to_cancel = int(data.split('_')[-1])
        user_id = query.from_user.id
        all_tasks, task_to_cancel, row_number = task_sheet.get_all_records(), None, 0
        for i, t in enumerate(all_tasks):
            if t.get('ID') == task_id_to_cancel: row_number = i + 2; task_to_cancel = t; break
        if not task_to_cancel: await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ."); return
        if f"({user_id})" in task_to_cancel.get('Status', ''):
            task_sheet.update_cell(row_number, 7, '–î–æ—Å—Ç—É–ø–Ω–æ')
            task_sheet.update_cell(row_number, 9, '')
            menu_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main_menu")]])
            await query.edit_message_text(text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.", reply_markup=menu_keyboard)
        else: await query.edit_message_text(text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.", reply_markup=None)
        return

    elif data == "back_to_main_menu":
        await query.message.delete()
        await context.bot.send_message(chat_id=query.from_user.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
        return
        
    elif data.startswith("confirm_") or data.startswith("reject_"):
        action, task_id_str, user_id_str = data.split('_')
        task_id, user_id = int(task_id_str), int(user_id_str)
        all_tasks, task_info, row_number = task_sheet.get_all_records(), None, 0
        for i, t in enumerate(all_tasks):
            if t.get('ID') == task_id: row_number = i + 2; task_info = t; break
        if not task_info: await query.edit_message_text(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞–Ω–∏–µ ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
        if action == 'confirm':
            task_sheet.update_cell(row_number, 7, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
            payouts_sheet.append_row([task_id, user_id, int(task_info.get('Reward', 0)), datetime.datetime.utcnow().isoformat()])
            await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ID {task_id} –¥–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
            await context.bot.send_message(user_id, f"üéâ –í–∞—à –æ—Ç–∑—ã–≤ –¥–ª—è ID {task_id} –æ–¥–æ–±—Ä–µ–Ω! **{task_info.get('Reward', 0)} –≥–æ–ª–¥—ã** –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            try:
                user_cell = users_sheet.find(str(user_id), in_column=1)
                if user_cell and users_sheet.cell(user_cell.row, 4).value:
                    ref_id, ref_bal = int(users_sheet.cell(user_cell.row, 4).value), update_user_balance(ref_id, REFERRAL_BONUS)
                    if ref_bal: await context.bot.send_message(ref_id, f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{(await context.bot.get_chat(user_id)).username} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{REFERRAL_BONUS} –≥–æ–ª–¥—ã**.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{ref_bal}**.", parse_mode='Markdown')
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ. –±–æ–Ω—É—Å–∞: {e}")
        elif action == 'reject':
            task_sheet.update_cell(row_number, 7, '–î–æ—Å—Ç—É–ø–Ω–æ')
            task_sheet.update_cell(row_number, 9, '')
            await query.edit_message_text(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ ID {task_id} –¥–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            await context.bot.send_message(user_id, f"üò• –í–∞—à –æ—Ç–∑—ã–≤ –¥–ª—è ID {task_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

    elif data.startswith("wd_complete_"):
        timestamp_to_find = data.split('_', 2)[-1]
        try:
            cell = withdrawals_sheet.find(timestamp_to_find, in_column=6)
            if cell:
                withdrawals_sheet.update_cell(cell.row, 7, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                await query.edit_message_text("‚úÖ –í—ã–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")
                await context.bot.send_message(withdrawals_sheet.cell(cell.row, 1).value, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            else: await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e: await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")

async def process_payouts(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID: return
    await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç...")
    pending, processed, to_delete = payouts_sheet.get_all_records(), 0, []
    now = datetime.datetime.utcnow()
    for i, p in enumerate(pending):
        if now - datetime.datetime.fromisoformat(p['ConfirmationTime']) >= datetime.timedelta(days=1):
            user_id, reward, new_bal = int(p['UserID']), int(p['Reward']), update_user_balance(user_id, reward)
            if new_bal is not None: await context.bot.send_message(user_id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ **{reward} –≥–æ–ª–¥—ã**! –í–∞—à –±–∞–ª–∞–Ω—Å: **{new_bal}**.", parse_mode='Markdown'); to_delete.append(i + 2); processed += 1
            else: print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    for row_num in sorted(to_delete, reverse=True): payouts_sheet.delete_rows(row_num)
    await update.message.reply_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø–ª–∞—Ç: {processed}.")

async def return_abandoned_tasks(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID: return
    await update.message.reply_text("üîé –ü—Ä–æ–≤–µ—Ä—è—é –±—Ä–æ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è...")
    all_tasks = task_sheet.get_all_records()
    now_utc = datetime.datetime.utcnow()
    returned_count = 0
    for i, task in enumerate(all_tasks):
        status, timestamp_str = task.get('Status', ''), task.get('TakenTimestamp', '')
        if status.startswith('–í —Ä–∞–±–æ—Ç–µ') and timestamp_str:
            try:
                taken_time = datetime.datetime.fromisoformat(timestamp_str.replace('Z', '+00:00')).replace(tzinfo=None)
                if now_utc - taken_time > datetime.timedelta(minutes=ABANDON_TIMEOUT_MINUTES):
                    row_number = i + 2
                    task_sheet.update_cell(row_number, 7, '–î–æ—Å—Ç—É–ø–Ω–æ')
                    task_sheet.update_cell(row_number, 9, '')
                    try:
                        user_id_in_status = int(status.split('(')[-1].replace(')', ''))
                        await context.bot.send_message(chat_id=user_id_in_status, text=f"‚è≥ –í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ID {task['ID']}. –û–Ω–æ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
                    except: pass
                    returned_count += 1
            except ValueError: continue
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {returned_count}.")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    if workbook is None: 
        print("–ü–û–ú–ò–õ–ö–ê: –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")
        return
        
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    withdrawal_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üì§ –í—ã–≤–æ–¥ –≥–æ–ª–¥—ã$'), start_withdrawal)],
        states={
            ASKING_WITHDRAWAL_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_withdrawal_amount)],
            AWAITING_AVATAR: [MessageHandler(filters.PHOTO, handle_avatar)]
        },
        fallbacks=[CommandHandler('cancel', cancel_action), MessageHandler(filters.Regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), cancel_action)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('^üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ$'), choose_platform))
    application.add_handler(MessageHandler(filters.Regex('^ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞$'), show_referral_info))
    application.add_handler(MessageHandler(filters.Regex('^üìä –ú–æ–π –±–∞–ª–∞–Ω—Å$'), show_balance))
    application.add_handler(MessageHandler(filters.Regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), start))
    application.add_handler(MessageHandler(filters.Regex('^(–û—Ç–∑—ã–≤—ã Google|–û—Ç–∑—ã–≤—ã –Ø–Ω–¥–µ–∫—Å)$'), show_platform_tasks))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^[0-9]+$'), handle_id_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))
    application.add_handler(CallbackQueryHandler(handle_button_callback))
    application.add_handler(CommandHandler("process_payouts", process_payouts))
    application.add_handler(CommandHandler("return_abandoned_tasks", return_abandoned_tasks))
    
   # ... (–∫–æ–¥ –∑ application.add_handler) ...

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()